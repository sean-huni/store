plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.8'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'com.diffplug.spotless' version '6.25.0'
    id "org.sonarqube" version "6.2.0.5505"
    id 'org.cyclonedx.bom' version '1.10.0'
    id 'jacoco'
}

// Define versions
ext {
    // Java version
    javaVersion = 24 // Upgraded to Java 24

    // Plugin versions
    springBootVersion = '3.4.8'
    springDependencyManagementVersion = '1.1.7'
    liquibaseGradleVersion = '2.2.0'
    spotlessVersion = '6.25.0'
    sonarqubeVersion = '6.2.0.5505'
    cyclonedxBomVersion = '1.10.0'

    // Library versions
    lombokVersion = '1.18.38'
    mapstructVersion = '1.6.2'
    mapstructProcessorVersion = '1.6.3'
    lombokMapstructBindingVersion = '0.2.0'
    caffeineVersion = '3.1.8'
    jjwtVersion = '0.12.6'
    springdocVersion = '2.8.9'
    mockitoCoreVersion = '5.18.0'
    palantirJavaFormatVersion = '2.50.0'

    // JaCoCo versions
    jacocoToolVersion = '0.8.13'

    // Coverage thresholds
    coverageMinimum = 0.99
}

// Apply the jacoco.gradle file
apply from: 'jacoco.gradle'

group = 'com.example'
version = '1.0.1'

// Define exclusions in one place to maintain consistency
def exclusions = ['**/*Test*', '@Generated']

// Test pattern for excluding files from test coverage
def testPattern = ['**/*Test*', '@Generated']

sonar {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", true  // Fails build if quality gate fails
        property "sonar.qualitygate.timeout", "300"  // 5 minutes timeout

        // Sonar exclusions
        property "sonar.coverage.exclusions", exclusions.join(',')

        // Defined test exclusions in a list for better readability
        def testExclusions = ["src/test/**/*", "src/main/java/com/example/store/config/OpenApiConfig.*"] + testPattern
        property "sonar.test.exclusions", testExclusions.join(',')

        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"
        property "sonar.tests", "src/test/java"

        // Quality Gates
        property "sonar.qualitygate.condition.1.metric", "coverage"
        property "sonar.qualitygate.condition.1.op", "LT"
        property "sonar.qualitygate.condition.1.error", "99"

        property "sonar.qualitygate.condition.2.metric", "code_smells"
        property "sonar.qualitygate.condition.2.op", "GT"
        property "sonar.qualitygate.condition.2.error", "0"

        property "sonar.qualitygate.condition.3.metric", "bugs"
        property "sonar.qualitygate.condition.3.op", "GT"
        property "sonar.qualitygate.condition.3.error", "0"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

spotless {
    java {
        palantirJavaFormat(palantirJavaFormatVersion)
                .style('PALANTIR')
                .formatJavadoc(true)
        importOrder('com', 'jakarta', 'lombok', 'org', '', 'javax|java', '\\#')
        removeUnusedImports()
        formatAnnotations()
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-docker-compose'
    implementation 'com.google.code.gson:gson'
    // Spring Security dependencies
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructProcessorVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    // Test dependencies
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.boot:spring-boot-docker-compose'
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructProcessorVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
}

tasks.named('test') {
    useJUnitPlatform() {
        if (project.hasProperty('tags')) {
            includeTags project.tags.split(',')
        }
    }
    failFast = true
}

// Custom task to run JaCoCo verification without compiling
tasks.register('runJacocoVerification') {
    description = 'Runs JaCoCo verification without compiling the code'
    group = 'Verification'

    // Skip compilation tasks
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(tasks.runJacocoVerification)) {
            tasks.withType(JavaCompile).configureEach {
                it.enabled = false
            }
        }
    }

    // Depend on the JaCoCo verification task
    dependsOn 'jacocoTestCoverageVerification'

    doLast {
        println "JaCoCo verification completed"
    }
}

// qualityCheck task is defined in jacoco.gradle