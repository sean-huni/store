// Apply JaCoCo plugin if not already applied
if (!project.plugins.hasPlugin('jacoco')) {
    apply plugin: 'jacoco'
}

// Define exclusions in one place to maintain consistency
def exclusions = [
        '**/*Test*',
        ["src/test/**/*", "**/config/OpenApiConfig.*", "**/store/config/OpenApiConfig.*"],
        '@Generated'
]

// Configure JaCoCo
jacoco {
    toolVersion = jacocoToolVersion
}

// Simple JaCoCo test report configuration
jacocoTestReport {
    dependsOn test

    // Using a different syntax for configuring reports
    reports.xml.required = true
    reports.html.required = true
}

// Simple JaCoCo test coverage verification
jacocoTestCoverageVerification {
    dependsOn test

    violationRules {
        // General rule for all classes except those with specific rules
        rule {
            element = 'CLASS'
            includes = ['com.example.store.*']
            excludes = exclusions as List<String>

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = coverageMinimum
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = coverageMinimum
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = coverageMinimum
            }
        }

        // Specific rule for JwtService with lower thresholds
        rule {
            element = 'CLASS'
            includes = ['com.example.store.service.auth.JwtService']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }
        }
    }
}

// Add a task to run all quality checks
tasks.register('qualityCheck') {
    dependsOn test
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}

// Ensure SonarQube uses JaCoCo reports
tasks.sonarqube {
    dependsOn jacocoTestReport
}